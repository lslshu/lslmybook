# 定义用户和用户组
user  www;
# 启动进程，通常与cpu的数量相等
worker_processes  1;
#错误日志[debug|info|notice|warn|error|crit]
error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid文件
pid        logs/nginx.pid;

#nginx打开最多文件描述，最好与ulimit -n保持一致
worker_rlimit_nofile 4096;

#工作模式及连接数上限
events {
    use epoll; #epoll多路复用IO，提高nginx性能
#单个worker process进程最大并发连接数（最大连接数=连接数*进程数）
    worker_connections  1024;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
#设定mime类型，类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
#设定日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
#日志记录文件，一般在server中设置日志文件位置
    #access_log  logs/access.log  main;
#nginx是否调用sendfile函数，普通应用为on
    sendfile        on;
#开启目录列表访问，适合下载服务器，默认关闭，可在server中
  #autoindex on；
#防止网络阻塞
    tcp_nopush     on;
#提高数据的实时响应性
    tcp_nodelay on;
#keepalive超时时间，客户端到服务器的连接持续有效时间，可避免建立或重新建立连接
    #keepalive_timeout  0;
    keepalive_timeout  65;
    
#开启gzip压缩
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
#压缩级别大小，max为9，min为1，值越小，cpu处理更快，值越大，消耗cpu越高
    gzip_comp_level 4;
    gzip_types text/plain application/x-javascript text/css application/xml;
#server文件所存放位置
    include /etc/nginx/conf.d/*.conf;

   }
