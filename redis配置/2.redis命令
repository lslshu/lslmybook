基础教程：https://www.runoob.com/redis
1.redis命令
redis客户端基本语法
redis-cli
远程服务上执行命令
redis-cli -h host -p port -a password

2.redis键（key）
Redis 键命令的基本语法
redis 127.0.0.1:6379> COMMAND KEY_NAME

127.0.0.1:6379> set runoobkey redis
OK
127.0.0.1:6379> del runoobkey
(integer) 1
实例中 DEL 是一个命令， runoobkey 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0

3.redis字符串（string）
redis字符串基本语法
redis 127.0.0.1:6379> COMMAND KEY_NAME

redis 127.0.0.1:6379> SET runoobkey redis
OK
redis 127.0.0.1:6379> GET runoobkey
"redis"
使用了 SET 和 GET 命令，键为 runoobkey。

4.Redis 哈希(Hash)
127.0.0.1:6379> HMSET runoobkey name "redis tutorial" description "redis basic commands for caching" likes 20 visitors 23000
OK
127.0.0.1:6379> hgetall runoobkey
1) "name"
2) "redis tutorial"
3) "description"
4) "redis basic commands for caching"
5) "likes"
6) "20"
7) "visitors"
8) "23000"
设置了 redis 的一些描述信息(name, description, likes, visitors) 到哈希表的 runoobkey 中。

5.Redis 列表(List)
127.0.0.1:6379> lpush runoobkey redis
(integer) 1
127.0.0.1:6379> lpush runoobkey mongodb
(integer) 2
127.0.0.1:6379> lpush runoobkey mysql
(integer) 3
127.0.0.1:6379> lrange runoobkey 0 10
1) "mysql"
2) "mongodb"
3) "redis"

6.redis集合（set）
Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。
redis 127.0.0.1:6379> SADD runoobkey redis
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mongodb
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mysql
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mysql
(integer) 0
redis 127.0.0.1:6379> SMEMBERS runoobkey

1) "mysql"
2) "mongodb"
3) "redis"

7.redis有序集合（sorted set）
Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。
有序集合的成员是唯一的,但分数(score)却可以重复。
redis 127.0.0.1:6379> ZADD runoobkey 1 redis
(integer) 1
redis 127.0.0.1:6379> ZADD runoobkey 2 mongodb
(integer) 1
redis 127.0.0.1:6379> ZADD runoobkey 3 mysql
(integer) 1
redis 127.0.0.1:6379> ZADD runoobkey 3 mysql
(integer) 0
redis 127.0.0.1:6379> ZADD runoobkey 4 mysql
(integer) 0
redis 127.0.0.1:6379> ZRANGE runoobkey 0 10 WITHSCORES

1) "redis"
2) "1"
3) "mongodb"
4) "2"
5) "mysql"
6) "4"

8.Redis HyperLogLog
Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。
在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。
但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素

127.0.0.1:6379> pfadd runoobkey 'redis'
(integer) 1
127.0.0.1:6379> pfadd runoobkey 'mongodb'
(integer) 1
127.0.0.1:6379> pfadd runoobkey 'mysql'
(integer) 1
127.0.0.1:6379> pfcount runoobkey
(integer) 3

9.Redis 发布订阅
演示发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 redisChat
127.0.0.1:6379> subscribe redischat
Reading messages... (press Ctrl-C to quit)
1) "subscribe"
2) "redischat"
3) (integer) 1
重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。
127.0.0.1:6379> publish redischat 'redis is a great caching technique'
(integer) 1
127.0.0.1:6379> publish redischat 'learn redis by runoob.com'
(integer) 1
订阅者的客户端会显示如下消息
1) "message"
2) "redischat"
3) "redis is a great caching technique"
1) "message"
2) "redischat"
3) "learn redis by runoob.com"

10.redis事务
Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：

批量操作在发送 EXEC 命令前被放入队列缓存。
收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。
在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。
一个事务从开始到执行会经历以下三个阶段：
开始事务。
命令入队。
执行事务。
以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事务， 一并执行事务中的所有命令
127.0.0.1:6379> multi
OK
127.0.0.1:6379> set book-name 'Mastering C++ in 21days'
QUEUED
127.0.0.1:6379> get book-name
QUEUED
127.0.0.1:6379> sadd tag 'c++' 'programming' 'mastering series'
QUEUED
127.0.0.1:6379> smembers tag
QUEUED
127.0.0.1:6379> exec
1) OK
2) "Mastering C++ in 21days"
3) (integer) 3
4) 1) "programming"
   2) "mastering series"
   3) "c++"
单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。

事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。

redis 127.0.0.1:7000> multi
OK
redis 127.0.0.1:7000> set a aaa
QUEUED
redis 127.0.0.1:7000> set b bbb
QUEUED
redis 127.0.0.1:7000> set c ccc
QUEUED
redis 127.0.0.1:7000> exec
1) OK
2) OK
3) OK
如果在 set b bbb 处失败，set a 已成功不会回滚，set c 还会继续执行。


11.redis脚本
Redis 脚本使用 Lua 解释器来执行脚本
Eval 命令的基本语法
EVAL script numkeys key [key ...] arg [arg ...]
127.0.0.1:6379> EVAL "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second
1) "key1"
2) "key2"
3) "first"

12.redis连接
Redis 连接命令主要是用于连接 redis 服务
客户端如何通过密码验证连接到 redis 服务，并检测服务是否在运行
redis 127.0.0.1:6379> AUTH "password"
OK
redis 127.0.0.1:6379> PING
PONG

13.redis服务器
Redis 服务器命令主要是用于管理 redis 服务
info
