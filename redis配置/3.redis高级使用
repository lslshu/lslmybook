1.redis数据备份与恢复
数据备份
127.0.0.1:6379> save
OK
将在 redis 安装目录中创建dump.rdb文件
[root@162 redis]# find / -name dump.rdb
/usr/local/redis/src/dump.rdb


数据恢复
将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令
127.0.0.1:6379> config get dir
1) "dir"
2) "/usr/local/redis/src"
以上命令 CONFIG GET dir 输出的 redis 安装目录为 /usr/local/redis/bin。

Bgsave
创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行
127.0.0.1:6379> BGSAVE
Background saving started

2.redis安全
通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全
127.0.0.1:6379> config get requirepass
1) "requirepass"
2) ""
默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务
通过以下命令来修改该参数
127.0.0.1:6379> CONFIG set requirepass "runoob"
OK
127.0.0.1:6379> CONFIG get requirepass
1) "requirepass"
2) "runoob"

3.redis性能测试
redis 性能测试的基本命令如下：
redis-benchmark [option] [option value]

在 redis 的目录下执行的，而不是 redis 客户端的内部指令
同时执行 10000 个请求来检测性能
redis-benchmark -n 10000  -q

[root@162 src]# redis-benchmark -n 10000  -q
PING_INLINE: 33112.59 requests per second
PING_BULK: 35842.29 requests per second
SET: 32573.29 requests per second
GET: 34246.57 requests per second
INCR: 34482.76 requests per second
LPUSH: 33444.82 requests per second
RPUSH: 31250.00 requests per second
LPOP: 37593.98 requests per second
RPOP: 37878.79 requests per second
SADD: 34843.21 requests per second
HSET: 36496.35 requests per second
SPOP: 37313.43 requests per second
LPUSH (needed to benchmark LRANGE): 26455.03 requests per second
LRANGE_100 (first 100 elements): 17064.85 requests per second
LRANGE_300 (first 300 elements): 6583.28 requests per second
LRANGE_500 (first 450 elements): 4420.87 requests per second
LRANGE_600 (first 600 elements): 4076.64 requests per second
MSET (10 keys): 25575.45 requests per second

1	-h	指定服务器主机名	127.0.0.1
2	-p	指定服务器端口	6379
3	-s	指定服务器 socket	
4	-c	指定并发连接数	50
5	-n	指定请求数	10000
6	-d	以字节的形式指定 SET/GET 值的数据大小	2
7	-k	1=keep alive 0=reconnect	1
8	-r	SET/GET/INCR 使用随机 key, SADD 使用随机值	
9	-P	通过管道传输 <numreq> 请求	1
10	-q	强制退出 redis。仅显示 query/sec 值	
11	--csv	以 CSV 格式输出	
12	-l	生成循环，永久执行测试	
13	-t	仅运行以逗号分隔的测试命令列表。	
14	-I	Idle 模式。仅打开 N 个 idle 连接并等待。	

4.redis客户端连接
Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：

首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。
然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法
然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送

最大连接数，可在redis.conf中更改
127.0.0.1:6379> config get maxclients
1) "maxclients"
2) "10000"
服务启动时设置最大连接数为 100000：
redis-server --maxclients 100000

5.redis管道技术
Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：
客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。服务端处理命令，并将结果返回给客户端。
查看 redis 管道

6.redis分区
分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。

分区的优势
通过利用多台计算机内存的和值，允许我们构造更大的数据库。
通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器，允许我们扩展网络带宽。
分区的不足
redis的一些特性在分区方面表现的不是很好：

涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。
涉及多个key的redis事务不能使用。
当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。
增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。
